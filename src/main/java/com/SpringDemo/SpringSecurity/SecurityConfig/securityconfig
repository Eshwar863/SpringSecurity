package com.SpringDemo.SpringSecurity.SecurityConfig;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

import javax.swing.*;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {

    //http.csrf(customizer -> customizer.disable());//disabling unknown logins from other pages or users unwanted webpages
    http.authorizeHttpRequests(request ->
            request.requestMatchers("/api/page1").permitAll()
            .anyRequest().authenticated()); //here authenticating the user if user is valid then he is allowed to access if not forbidden
   /*
   http.formLogin(Customizer.withDefaults());
    http.httpBasic(Customizer.withDefaults());
  */

    return http.build();
}
@Bean
public UserDetailsService userDetailsService() {

    UserDetails admin = User.withUsername("admin")
            .password("{noop}hello")
            .roles("ADMIN")
            .build();
    return new InMemoryUserDetailsManager(admin);
}

}











public SecurityFilterChain securityFilterChain (HttpSecurity http) throws Exception {

return http
.csrf(customizer -> {
    try {
        customizer.disable()
        .authorizeHttpRequests (request -> request.anyRequest().authenticated())
        .httpBasic (Customizer.withDefaults())
        .sessionManagement (session ->
        session.sessionCreationPolicy (SessionCreationPolicy.STATELESS))
        .build();
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
};
//http.formLogin(Customizer.withDefaults());

@Bean
public AuthenticationProvider authenticationProvider(){
DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
provider.setPasswordEncoder (new BCryptPasswordEncoder(strength: 12));
provider.setUserDetails Service (User